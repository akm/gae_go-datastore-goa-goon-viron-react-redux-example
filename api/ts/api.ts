/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * The appengine example
 * A simple appengine example
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Error response media type (default view)
 * @export
 * @interface Error
 */
export interface Error {
    /**
     * an application-specific error code, expressed as a string value.
     * @type {string}
     * @memberof Error
     */
    code?: string;
    /**
     * a human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof Error
     */
    detail?: string;
    /**
     * a unique identifier for this particular occurrence of the problem.
     * @type {string}
     * @memberof Error
     */
    id?: string;
    /**
     * a meta object containing non-standard meta-information about the error.
     * @type {any}
     * @memberof Error
     */
    meta?: any;
    /**
     * the HTTP status code applicable to this problem, expressed as a string value.
     * @type {string}
     * @memberof Error
     */
    status?: string;
}

/**
 * Memo (default view)
 * @export
 * @interface Memo
 */
export interface Memo {
    /**
     * Content of memo
     * @type {string}
     * @memberof Memo
     */
    content: string;
    /**
     * Time when memo is created
     * @type {Date}
     * @memberof Memo
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Memo
     */
    id: string;
    /**
     * Shared to public
     * @type {boolean}
     * @memberof Memo
     */
    shared: boolean;
    /**
     * Time when memo is updated
     * @type {Date}
     * @memberof Memo
     */
    updatedAt: Date;
}

/**
 * MemoCollection is the media type for an array of Memo (default view)
 * @export
 * @interface MemoCollection
 */
export interface MemoCollection extends Array<Memo> {
}

/**
 * 
 * @export
 * @interface MemoPayload
 */
export interface MemoPayload {
    /**
     * Content of memo
     * @type {string}
     * @memberof MemoPayload
     */
    content: string;
    /**
     * Author name
     * @type {string}
     * @memberof MemoPayload
     */
    createdBy?: string;
    /**
     * Shared to public
     * @type {boolean}
     * @memberof MemoPayload
     */
    shared?: boolean;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Download swagger/swagger.json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swaggerswaggerJson(options: any = {}): FetchArgs {
            const localVarPath = `/swagger.json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download swaggerui/dist
         * @param {string} filepath Relative file path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swaggerswaggeruifilepath(filepath: string, options: any = {}): FetchArgs {
            // verify required parameter 'filepath' is not null or undefined
            if (filepath === null || filepath === undefined) {
                throw new RequiredError('filepath','Required parameter filepath was null or undefined when calling swaggerswaggeruifilepath.');
            }
            const localVarPath = `/swaggerui/{filepath}`
                .replace(`{${"filepath"}}`, encodeURIComponent(String(filepath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Download swagger/swagger.json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swaggerswaggerJson(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).swaggerswaggerJson(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Download swaggerui/dist
         * @param {string} filepath Relative file path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swaggerswaggeruifilepath(filepath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).swaggerswaggeruifilepath(filepath, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Download swagger/swagger.json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swaggerswaggerJson(options?: any) {
            return DefaultApiFp(configuration).swaggerswaggerJson(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Download swaggerui/dist
         * @param {string} filepath Relative file path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swaggerswaggeruifilepath(filepath: string, options?: any) {
            return DefaultApiFp(configuration).swaggerswaggeruifilepath(filepath, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Download swagger/swagger.json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public swaggerswaggerJson(options?: any) {
        return DefaultApiFp(this.configuration).swaggerswaggerJson(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Download swaggerui/dist
     * @param {string} filepath Relative file path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public swaggerswaggeruifilepath(filepath: string, options?: any) {
        return DefaultApiFp(this.configuration).swaggerswaggeruifilepath(filepath, options)(this.fetch, this.basePath);
    }

}

/**
 * MemosApi - fetch parameter creator
 * @export
 */
export const MemosApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * create
         * @summary create memos
         * @param {MemoPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosCreate(payload: MemoPayload, options: any = {}): FetchArgs {
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload','Required parameter payload was null or undefined when calling memosCreate.');
            }
            const localVarPath = `/memos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MemoPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(payload || {}) : (payload || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete
         * @summary delete memos
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosDelete(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling memosDelete.');
            }
            const localVarPath = `/memos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list
         * @summary list memos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosList(options: any = {}): FetchArgs {
            const localVarPath = `/memos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * show
         * @summary show memos
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosShow(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling memosShow.');
            }
            const localVarPath = `/memos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update
         * @summary update memos
         * @param {string} id 
         * @param {MemoPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosUpdate(id: string, payload: MemoPayload, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling memosUpdate.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload','Required parameter payload was null or undefined when calling memosUpdate.');
            }
            const localVarPath = `/memos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MemoPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(payload || {}) : (payload || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemosApi - functional programming interface
 * @export
 */
export const MemosApiFp = function(configuration?: Configuration) {
    return {
        /**
         * create
         * @summary create memos
         * @param {MemoPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosCreate(payload: MemoPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Memo> {
            const localVarFetchArgs = MemosApiFetchParamCreator(configuration).memosCreate(payload, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * delete
         * @summary delete memos
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosDelete(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Memo> {
            const localVarFetchArgs = MemosApiFetchParamCreator(configuration).memosDelete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * list
         * @summary list memos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MemoCollection> {
            const localVarFetchArgs = MemosApiFetchParamCreator(configuration).memosList(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * show
         * @summary show memos
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosShow(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Memo> {
            const localVarFetchArgs = MemosApiFetchParamCreator(configuration).memosShow(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * update
         * @summary update memos
         * @param {string} id 
         * @param {MemoPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosUpdate(id: string, payload: MemoPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Memo> {
            const localVarFetchArgs = MemosApiFetchParamCreator(configuration).memosUpdate(id, payload, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MemosApi - factory interface
 * @export
 */
export const MemosApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * create
         * @summary create memos
         * @param {MemoPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosCreate(payload: MemoPayload, options?: any) {
            return MemosApiFp(configuration).memosCreate(payload, options)(fetch, basePath);
        },
        /**
         * delete
         * @summary delete memos
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosDelete(id: string, options?: any) {
            return MemosApiFp(configuration).memosDelete(id, options)(fetch, basePath);
        },
        /**
         * list
         * @summary list memos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosList(options?: any) {
            return MemosApiFp(configuration).memosList(options)(fetch, basePath);
        },
        /**
         * show
         * @summary show memos
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosShow(id: string, options?: any) {
            return MemosApiFp(configuration).memosShow(id, options)(fetch, basePath);
        },
        /**
         * update
         * @summary update memos
         * @param {string} id 
         * @param {MemoPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memosUpdate(id: string, payload: MemoPayload, options?: any) {
            return MemosApiFp(configuration).memosUpdate(id, payload, options)(fetch, basePath);
        },
    };
};

/**
 * MemosApi - object-oriented interface
 * @export
 * @class MemosApi
 * @extends {BaseAPI}
 */
export class MemosApi extends BaseAPI {
    /**
     * create
     * @summary create memos
     * @param {MemoPayload} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemosApi
     */
    public memosCreate(payload: MemoPayload, options?: any) {
        return MemosApiFp(this.configuration).memosCreate(payload, options)(this.fetch, this.basePath);
    }

    /**
     * delete
     * @summary delete memos
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemosApi
     */
    public memosDelete(id: string, options?: any) {
        return MemosApiFp(this.configuration).memosDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * list
     * @summary list memos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemosApi
     */
    public memosList(options?: any) {
        return MemosApiFp(this.configuration).memosList(options)(this.fetch, this.basePath);
    }

    /**
     * show
     * @summary show memos
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemosApi
     */
    public memosShow(id: string, options?: any) {
        return MemosApiFp(this.configuration).memosShow(id, options)(this.fetch, this.basePath);
    }

    /**
     * update
     * @summary update memos
     * @param {string} id 
     * @param {MemoPayload} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemosApi
     */
    public memosUpdate(id: string, payload: MemoPayload, options?: any) {
        return MemosApiFp(this.configuration).memosUpdate(id, payload, options)(this.fetch, this.basePath);
    }

}


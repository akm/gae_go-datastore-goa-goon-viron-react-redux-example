// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": users Resource Client
//
// Command:
// $ goagen
// --design=github.com/akm/gae_go-datastore-goa-goon-viron-react-redux-example/admin/design
// --out=$(GOPATH)/src/github.com/akm/gae_go-datastore-goa-goon-viron-react-redux-example/admin
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateUsersPath computes a request path to the create action of users.
func CreateUsersPath() string {

	return fmt.Sprintf("/users")
}

// create
func (c *Client) CreateUsers(ctx context.Context, path string, payload *UserPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateUsersRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateUsersRequest create the request corresponding to the create action endpoint of the users resource.
func (c *Client) NewCreateUsersRequest(ctx context.Context, path string, payload *UserPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteUsersPath computes a request path to the delete action of users.
func DeleteUsersPath(id string) string {
	param0 := id

	return fmt.Sprintf("/users/%s", param0)
}

// delete
func (c *Client) DeleteUsers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteUsersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteUsersRequest create the request corresponding to the delete action endpoint of the users resource.
func (c *Client) NewDeleteUsersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListUsersPath computes a request path to the list action of users.
func ListUsersPath() string {

	return fmt.Sprintf("/users")
}

// list
func (c *Client) ListUsers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListUsersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListUsersRequest create the request corresponding to the list action endpoint of the users resource.
func (c *Client) NewListUsersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateUsersPath computes a request path to the update action of users.
func UpdateUsersPath(id string) string {
	param0 := id

	return fmt.Sprintf("/users/%s", param0)
}

// update
func (c *Client) UpdateUsers(ctx context.Context, path string, payload *UserPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateUsersRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateUsersRequest create the request corresponding to the update action endpoint of the users resource.
func (c *Client) NewUpdateUsersRequest(ctx context.Context, path string, payload *UserPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

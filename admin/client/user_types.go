// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": Application User Types
//
// Command:
// $ goagen
// --design=github.com/akm/gae_go-datastore-goa-goon-viron-react-redux-example/admin/design
// --out=$(GOPATH)/src/github.com/akm/gae_go-datastore-goa-goon-viron-react-redux-example/admin
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
)

// memoPayload user type.
type memoPayload struct {
	// Encoded datastore.Key
	AuthorKey *string `form:"author_key,omitempty" json:"author_key,omitempty" yaml:"author_key,omitempty" xml:"author_key,omitempty"`
	// Content of memo
	Content *string `form:"content,omitempty" json:"content,omitempty" yaml:"content,omitempty" xml:"content,omitempty"`
	// Shared to public
	Shared *bool `form:"shared,omitempty" json:"shared,omitempty" yaml:"shared,omitempty" xml:"shared,omitempty"`
}

// Validate validates the memoPayload type instance.
func (ut *memoPayload) Validate() (err error) {
	if ut.Content == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "content"))
	}
	return
}

// Publicize creates MemoPayload from memoPayload
func (ut *memoPayload) Publicize() *MemoPayload {
	var pub MemoPayload
	if ut.AuthorKey != nil {
		pub.AuthorKey = ut.AuthorKey
	}
	if ut.Content != nil {
		pub.Content = *ut.Content
	}
	if ut.Shared != nil {
		pub.Shared = ut.Shared
	}
	return &pub
}

// MemoPayload user type.
type MemoPayload struct {
	// Encoded datastore.Key
	AuthorKey *string `form:"author_key,omitempty" json:"author_key,omitempty" yaml:"author_key,omitempty" xml:"author_key,omitempty"`
	// Content of memo
	Content string `form:"content" json:"content" yaml:"content" xml:"content"`
	// Shared to public
	Shared *bool `form:"shared,omitempty" json:"shared,omitempty" yaml:"shared,omitempty" xml:"shared,omitempty"`
}

// Validate validates the MemoPayload type instance.
func (ut *MemoPayload) Validate() (err error) {
	if ut.Content == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "content"))
	}
	return
}

// userPayload user type.
type userPayload struct {
	// Admin
	Admin *bool `form:"admin,omitempty" json:"admin,omitempty" yaml:"admin,omitempty" xml:"admin,omitempty"`
	// Auth Domain
	AuthDomain *string `form:"auth_domain,omitempty" json:"auth_domain,omitempty" yaml:"auth_domain,omitempty" xml:"auth_domain,omitempty"`
	// Client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" yaml:"client_id,omitempty" xml:"client_id,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// FederatedIdentity
	FederatedIdentity *string `form:"federated_identity,omitempty" json:"federated_identity,omitempty" yaml:"federated_identity,omitempty" xml:"federated_identity,omitempty"`
	// FederatedProvider
	FederatedProvider *string `form:"federated_provider,omitempty" json:"federated_provider,omitempty" yaml:"federated_provider,omitempty" xml:"federated_provider,omitempty"`
	// not auto-generated ID
	ID *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
}

// Validate validates the userPayload type instance.
func (ut *userPayload) Validate() (err error) {
	if ut.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "id"))
	}
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	return
}

// Publicize creates UserPayload from userPayload
func (ut *userPayload) Publicize() *UserPayload {
	var pub UserPayload
	if ut.Admin != nil {
		pub.Admin = ut.Admin
	}
	if ut.AuthDomain != nil {
		pub.AuthDomain = ut.AuthDomain
	}
	if ut.ClientID != nil {
		pub.ClientID = ut.ClientID
	}
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.FederatedIdentity != nil {
		pub.FederatedIdentity = ut.FederatedIdentity
	}
	if ut.FederatedProvider != nil {
		pub.FederatedProvider = ut.FederatedProvider
	}
	if ut.ID != nil {
		pub.ID = *ut.ID
	}
	return &pub
}

// UserPayload user type.
type UserPayload struct {
	// Admin
	Admin *bool `form:"admin,omitempty" json:"admin,omitempty" yaml:"admin,omitempty" xml:"admin,omitempty"`
	// Auth Domain
	AuthDomain *string `form:"auth_domain,omitempty" json:"auth_domain,omitempty" yaml:"auth_domain,omitempty" xml:"auth_domain,omitempty"`
	// Client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" yaml:"client_id,omitempty" xml:"client_id,omitempty"`
	// Email
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// FederatedIdentity
	FederatedIdentity *string `form:"federated_identity,omitempty" json:"federated_identity,omitempty" yaml:"federated_identity,omitempty" xml:"federated_identity,omitempty"`
	// FederatedProvider
	FederatedProvider *string `form:"federated_provider,omitempty" json:"federated_provider,omitempty" yaml:"federated_provider,omitempty" xml:"federated_provider,omitempty"`
	// not auto-generated ID
	ID string `form:"id" json:"id" yaml:"id" xml:"id"`
}

// Validate validates the UserPayload type instance.
func (ut *UserPayload) Validate() (err error) {
	if ut.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "id"))
	}
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	return
}

// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": memos Resource Client
//
// Command:
// $ goagen
// --design=github.com/akm/gae_go-datastore-goa-goon-viron-react-redux-example/admin/design
// --out=$(GOPATH)/src/github.com/akm/gae_go-datastore-goa-goon-viron-react-redux-example/admin
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateMemosPath computes a request path to the create action of memos.
func CreateMemosPath() string {

	return fmt.Sprintf("/memos")
}

// create
func (c *Client) CreateMemos(ctx context.Context, path string, payload *MemoPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateMemosRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateMemosRequest create the request corresponding to the create action endpoint of the memos resource.
func (c *Client) NewCreateMemosRequest(ctx context.Context, path string, payload *MemoPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteMemosPath computes a request path to the delete action of memos.
func DeleteMemosPath(id string) string {
	param0 := id

	return fmt.Sprintf("/memos/%s", param0)
}

// delete
func (c *Client) DeleteMemos(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteMemosRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteMemosRequest create the request corresponding to the delete action endpoint of the memos resource.
func (c *Client) NewDeleteMemosRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListMemosPath computes a request path to the list action of memos.
func ListMemosPath() string {

	return fmt.Sprintf("/memos")
}

// list
func (c *Client) ListMemos(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListMemosRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListMemosRequest create the request corresponding to the list action endpoint of the memos resource.
func (c *Client) NewListMemosRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateMemosPath computes a request path to the update action of memos.
func UpdateMemosPath(id string) string {
	param0 := id

	return fmt.Sprintf("/memos/%s", param0)
}

// update
func (c *Client) UpdateMemos(ctx context.Context, path string, payload *MemoPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateMemosRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateMemosRequest create the request corresponding to the update action endpoint of the memos resource.
func (c *Client) NewUpdateMemosRequest(ctx context.Context, path string, payload *MemoPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

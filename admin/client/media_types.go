// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/akm/gae_go-datastore-goa-goon-viron-react-redux-example/admin/design
// --out=$(GOPATH)/src/github.com/akm/gae_go-datastore-goa-goon-viron-react-redux-example/admin
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
)

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Memo (default view)
//
// Identifier: application/vnd.memo+json; view=default
type Memo struct {
	// Encoded datastore.Key
	AuthorKey string `form:"author_key" json:"author_key" yaml:"author_key" xml:"author_key"`
	// Content of memo
	Content string `form:"content" json:"content" yaml:"content" xml:"content"`
	// Time when memo is created
	CreatedAt time.Time `form:"created_at" json:"created_at" yaml:"created_at" xml:"created_at"`
	ID        string    `form:"id" json:"id" yaml:"id" xml:"id"`
	// Shared to public
	Shared bool `form:"shared" json:"shared" yaml:"shared" xml:"shared"`
	// Time when memo is updated
	UpdatedAt time.Time `form:"updated_at" json:"updated_at" yaml:"updated_at" xml:"updated_at"`
}

// Validate validates the Memo media type instance.
func (mt *Memo) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.AuthorKey == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "author_key"))
	}
	if mt.Content == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "content"))
	}

	return
}

// DecodeMemo decodes the Memo instance encoded in resp body.
func (c *Client) DecodeMemo(resp *http.Response) (*Memo, error) {
	var decoded Memo
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// MemoCollection is the media type for an array of Memo (default view)
//
// Identifier: application/vnd.memo+json; type=collection; view=default
type MemoCollection []*Memo

// Validate validates the MemoCollection media type instance.
func (mt MemoCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeMemoCollection decodes the MemoCollection instance encoded in resp body.
func (c *Client) DecodeMemoCollection(resp *http.Response) (MemoCollection, error) {
	var decoded MemoCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// User (default view)
//
// Identifier: application/vnd.user+json; view=default
type User struct {
	// Admin
	Admin *bool `form:"admin,omitempty" json:"admin,omitempty" yaml:"admin,omitempty" xml:"admin,omitempty"`
	// Auth Domain
	AuthDomain *string `form:"auth_domain,omitempty" json:"auth_domain,omitempty" yaml:"auth_domain,omitempty" xml:"auth_domain,omitempty"`
	// Client ID
	ClientID  *string   `form:"client_id,omitempty" json:"client_id,omitempty" yaml:"client_id,omitempty" xml:"client_id,omitempty"`
	CreatedAt time.Time `form:"created_at" json:"created_at" yaml:"created_at" xml:"created_at"`
	// Email
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// FederatedIdentity
	FederatedIdentity *string `form:"federated_identity,omitempty" json:"federated_identity,omitempty" yaml:"federated_identity,omitempty" xml:"federated_identity,omitempty"`
	// FederatedProvider
	FederatedProvider *string `form:"federated_provider,omitempty" json:"federated_provider,omitempty" yaml:"federated_provider,omitempty" xml:"federated_provider,omitempty"`
	// not auto-generated ID
	ID        string    `form:"id" json:"id" yaml:"id" xml:"id"`
	UpdatedAt time.Time `form:"updated_at" json:"updated_at" yaml:"updated_at" xml:"updated_at"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}

	return
}

// DecodeUser decodes the User instance encoded in resp body.
func (c *Client) DecodeUser(resp *http.Response) (*User, error) {
	var decoded User
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// UserCollection is the media type for an array of User (default view)
//
// Identifier: application/vnd.user+json; type=collection; view=default
type UserCollection []*User

// Validate validates the UserCollection media type instance.
func (mt UserCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUserCollection decodes the UserCollection instance encoded in resp body.
func (c *Client) DecodeUserCollection(resp *http.Response) (UserCollection, error) {
	var decoded UserCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "appengine": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/akm/gae_go-datastore-goa-goon-viron-react-redux-example/admin/design
// --out=$(GOPATH)/src/github.com/akm/gae_go-datastore-goa-goon-viron-react-redux-example/admin
// --version=v1.3.1

package app

import (
	"github.com/goadesign/goa"
	"time"
)

// Memo (default view)
//
// Identifier: application/vnd.memo+json; view=default
type Memo struct {
	// Encoded datastore.Key
	AuthorKey string `form:"author_key" json:"author_key" yaml:"author_key" xml:"author_key"`
	// Content of memo
	Content string `form:"content" json:"content" yaml:"content" xml:"content"`
	// Time when memo is created
	CreatedAt time.Time `form:"created_at" json:"created_at" yaml:"created_at" xml:"created_at"`
	ID        string    `form:"id" json:"id" yaml:"id" xml:"id"`
	// Shared to public
	Shared bool `form:"shared" json:"shared" yaml:"shared" xml:"shared"`
	// Time when memo is updated
	UpdatedAt time.Time `form:"updated_at" json:"updated_at" yaml:"updated_at" xml:"updated_at"`
}

// Validate validates the Memo media type instance.
func (mt *Memo) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.AuthorKey == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "author_key"))
	}
	if mt.Content == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "content"))
	}

	return
}

// MemoCollection is the media type for an array of Memo (default view)
//
// Identifier: application/vnd.memo+json; type=collection; view=default
type MemoCollection []*Memo

// Validate validates the MemoCollection media type instance.
func (mt MemoCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// User (default view)
//
// Identifier: application/vnd.user+json; view=default
type User struct {
	// Admin
	Admin bool `form:"admin" json:"admin" yaml:"admin" xml:"admin"`
	// Auth Domain
	AuthDomain string `form:"auth_domain" json:"auth_domain" yaml:"auth_domain" xml:"auth_domain"`
	// Client ID
	ClientID string `form:"client_id" json:"client_id" yaml:"client_id" xml:"client_id"`
	// Email
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// FederatedIdentity
	FederatedIdentity string `form:"federated_identity" json:"federated_identity" yaml:"federated_identity" xml:"federated_identity"`
	// FederatedProvider
	FederatedProvider string `form:"federated_provider" json:"federated_provider" yaml:"federated_provider" xml:"federated_provider"`
	// not auto-generated ID
	ID string `form:"id" json:"id" yaml:"id" xml:"id"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	if mt.AuthDomain == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "auth_domain"))
	}

	if mt.ClientID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "client_id"))
	}
	if mt.FederatedIdentity == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "federated_identity"))
	}
	if mt.FederatedProvider == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "federated_provider"))
	}
	return
}

// UserCollection is the media type for an array of User (default view)
//
// Identifier: application/vnd.user+json; type=collection; view=default
type UserCollection []*User

// Validate validates the UserCollection media type instance.
func (mt UserCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
